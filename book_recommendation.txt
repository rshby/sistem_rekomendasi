import pandas as pd
import numpy as np

from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extreaction.text import CountVercorizer

# import data
df = pd.read_csv("books.csv", encoding="unicode_escape", error_bad_lines=False)

df.head()

# create a list of columns to keep
columns = ["title", "authors", "publisher"]

# create a function to combine the important column/features
def combine_features(data):
    features = []
    for i in range(0, data.shape[0]):
        features.append(data["title"][i] + " " + data["aurhors"][i] + " " + data["publisher"][i])

    return features

# create a column to store the combined features
df["combine_features"] = combine_features(df)

df.head()


# convert the text from a new column to a matrix of word counts
cm = CountsVectorizer().fit_transform(df["combined_features"])

# get the cosine similarity matrix
cs = cosine_similarity(cm)

#print the score
print(cs)

# get the title of the book read
title = df["title"][1]

# find the book id of the book that the user likes
book_id = df[df["title"] == title]["book_id"].values[0]

book_id

# create a list of tuples in the form (book_id, similarity_score)
scores = list(enumerate(cs[book_id]))
print(scores)

# sort the list of similar books in descending order
sorted_scores = sorted(score, key=lambda x: x[1], reverse=True)

sorted_score = sorted_score[1:]

sorted_score

# create a loop to print 5 books from the sorted list
j = 0
print("the 5 most recommended books to")
for item in sorted_scores:
    books_title = df[df["book_id"] == item[0]]["title"].values[0]
    print(j+1, book_title)
    j+=1
    if j > 6:
       break



